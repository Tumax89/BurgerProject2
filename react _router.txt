Хуучин вэб хуудас хооронд шилжилт хийхдээ тухайн хуудсыг бүхлээр нь рендер хийдэг байсан бол Реакт нь зөвхөн тухайн хэсэгт л рендер хийж харуулдаг.
Эхлээд import {BrowserRouter} from "react-router-dom" хийнэ. Энэ нь тухайн аппликэйшнд route хэрэглэх гэж байна шүү гэдгийг хэлдэг. Тухайн аппликэйшины хамгийн гадна талын component-ийн гадуур BrowserRouter-ий хийж өгдөг.
Component болгоныг тус тусад нь нэг хуудсанд харуулахын тулд <Route> гэдэг компонентийг импортолж оруулж ирдэг.
Жнь: <Route>Home</Route> тухайн хуудас яг ямар хаяг нь дээр гарч ирэхийг Route path='' зааж өгдөг.

 Route path='/'-ийн ташуу зураас хоёр хуудсан дээр зэрэг байгаа учраас нэг хуудаснаас дараагийн хуудсанд шилжих үед өмнөх хуудас нь давхар гарч ирдэг, ийм тохиолдолд зөвхөн нэг хуудас ажилланаа гэдгийг зааж өгөхийн тулд exact гэдгийг бичиж өгдөг.

Олон тооны Route дээр exact ашигласан үед алдаа гарах боломжтой. Олон Route-ийн зөвхөн нэг нь л ажиллах шаардлагатай, нэг нь биелэсэн тохиолдолд  нөгөөхийг ашиглах шаардлаггүй тохиолдолд "switch" буюу сонгуулдаг tag-ийг ашиглана. хичээл №56
Switch-ийг ашиглах үедээ анхаарах зүйл нь switch нь тухайн хуудаснууд зөвхөн нэгийг л ажиллуулдаг бөгөөд ажиллуулах үедээ дээрээс нь эхэлж шалгадаг.Жш:            <Route path="/orders" component={OrderPage} />
            <Route path="/" component={BurgerPage} /> гэх маягаар хийнэ.


 2-рт энгийн href tag-ийг хэрэглэсэн тохиолдолд тухайн хуудсыг бүтнээр нь рендер хийдэг, үүнээс зайлс хийхийн тулд link гэдэг компонентийг хэрэглэдэг. Линкийг хэрэглэсэн тохиолдолд "а href"-ийн оронд "link to"-г хэрэглэнэ. Route ашиглан газар дээр нь JSX буцаах, рендер хийх болон компонент дуудах боломжтой.
 Зарим үед Link-рүү class дамжуулах шаардлагатай тохиолдолд NavLink-ийг ашиглана. Энэ линк нь Nav хийх ажлыг хялбаршуулж өгдөг, энэ компонент нь цаанаа яг active үе дээр байдаг өөрийн гэсэн класстай байдаг(MenuItem-аас харна уу).


Хичээл №57 Жш:
course/:id-г дамжуулж авахдаа
<Route path="/course/:id" component={Course} />
Дээрх Route-ийн path-аар course-ийн id гэдэг хувьсагч дамжуулж, бичсэн юм болгоныг id гэдэг параметр дамжина. component={Course}-руу параметр дамжина. Параметр нь props-оор дамжина.
Props-ийг хэвлээд харах үед: history, match, locatian гэсэн гурван ширхэг обьект байдаг.
history, match, locatian гуравыг React Route хийж байгаа үед байнга ашигладаг. 
History гэдэг нь броусер дотор ашигладаг өөрийх нь обьект, дарсан линк болгоныг history-руугаа хадгалдаг. History болгон дотроо олон обьекттой. history нь stack шиг дээр дээрэсээ дараалсан хэлбэртэй байдаг, goback хийёэн тохиолдолд хамгийн дээдхийг нь устгаж хаяаад доодох хуудсыг нь харуулдаг. шинээр хуудас нэмэхийн тулд push гэдэг обьектийг ашигладаг. props.match дотор тухайн url-ийн ерөнхий архитектур байдаг бөгөөд цаанаас дамжиж ирж байгаа параметрүүдийг match-аар дамжуулж авдаг.

   dangerouslySetInnerHTML={{ __html: this.state.course.tailbar }
dangerouslySetInnerHTML= гэдэг нь html-ийг өөрчилхөд хэрэглэнэ.


withRouter
Route ашигласан тохиолдолд history, match, location 3-ийг хэрэглэж болдог, харин Route хэрэглээгүй өөр компонент дотор дээрх гуравыг хэрэглэх шаардлагатай тохиолдолд withRouter гэх highOrder component-ийг ашиглана. №60

withRouter нь зүгээр л энгийн функц гэсэн үг, мөн нь бас компонент мөн гэхдээ ямар нэгэн JSX буцааддагүй.  highOrder гэдэг component нь тухайн нэг component-уруу тухайн component-д байдаггүй зүйлсийг нэмэлтээр оруулж өгдөг component юм.
withRouter-ийг яаж хэрэглэдэг вэ гэхээр withRouter дотор withRouter шаардлагатай компонентийг хийж өгсөнөөр withRouter-ийн үйлдэлүүд ороод ирдэг. export хийх үедээ withRouter(Burger) гэх мэтээр буцаадаг.
withRouter-ийг name байдлаар {} хаалтан дотор хийж импортлоно.