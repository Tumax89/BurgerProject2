Redux нь дундаа ашиглах өгөгдөлийг өөр дээрээ хадгалдаггүй, урьд нь компонент болгон тусдаа state-ээ хадгалдаг байсан бол redux хэрэглэсэн тохиолдолд "store" хэмээх нэгдсэн нэг газар хадгалдаг. Жнь: login хэмээх нэг компонент байлаа гэж үзэхэд тухайн хүн login хийсэн гэдгийг программын энд тэндгүй гаргах хэрэгтэй болно, тиймээс тухайн state-ийг дундаа хэрэглэх учир "store" дотороо хадгална. "store"-д хийсний дараагаар зарим компонентүүд тухайн логин хийсэн хүний нэрийг үзүүлдэг компонентүүд хэрвээ логин нэр өөрчлөгдсөн тохиолдолд бидэнд хэлээрэй гээд "store"-д бүртгүүлчихсэн байдаг бөгөөд үүнийг subscription буюу subscrip хийх буюу бүртгүүлэх гэдэг, ерөнхийдөө цаана нь "OBserver pattern" гэдэг програмчлалын арга байдаг тэр нь өгөгдөлийг хэсэг бүлэг обьект ажиглаж бөгөөд хэрвээ тэр өгөгдөл дээр өөрчлөлт орсон тохиолдолд шууд тэр обьект рүү мэдэгддэг.
Логин нэр орлоо гэсэн тохиолдолд "store" нь бүртгүүлсэн компонент болгон руу өөрсдийгөө рендер хийгээрэй гэсэн мэдээлэлийг дамжуулдаг.
  REdux АРХИТЕТУР зураг


"View" нь "store" доторх өгөгдөлийг дураараа очиж өөрчлөх боломжгүй, зөвхөн нэг чиг рүү л өгөгдөл урсана. Жнь: Үхрийн махыг нэгээр нэмэгдүүл гэсэн товчыг дарсан тохиолдолд view доторх компонентоос захиалга гарна, тэр захиалгыг нь "Action" гэдэг, үхрийн махыг нэгээр нэмэгдүүл гэсэн "Action" явна, яаж нэмэгдүүлэх талаар "Action" дотор юу ч байхгүй, энэ бол зүгээр л ийм үйлдэлийг хийгээрэй гээд дамжуулдаг. 
Middleware гэдэг нь дундын нөхдүүд (дундын программ хангамж, обьектүүд, компонентүүд) гэсэн үг, Middleware-ээр үйлдэлүүд нэг нэгээрээ дамждаг, хэдэн ч Middleware байж болох бөгөөд бүгдийг нь дайрч өнгөрдөг. Хамгийн алдартай 2 Middleware нь "Redux-thunk", "Redux-Saga" юм, энэ 2 нь "React" аппликэйшинд side effect(серверээс өгөгдөл татаж авчрах гэх мэт) хийж өгөх үүрэгтэй. Middleware үүргээ гүйцэтгэж дууссаны дараагаар action "REDUCER" дээр ирдэг. "REDUCER" дээр яг ирсэн дараалaлынхаа дагуу ажиллана. Тухайн action-аас шалтгаалан "REDUCER" ажиллаж стэйтэн дотороо өөрчлөлт хийнэ, шаардлагагүй "REDUCER" ажиллахгүй зүгээр л тоолгүй өнгөрөөдөг.  "REDUCER" болгон төлвийн жижиг хэсгүүдийг буцаах бөгөөд тэр хэсгүүд нь нэгдгэгдээд "store" дотор хадгалагддаг. Тэхээр "store" дотор хадгалагдаж байгаа өгөгдөлүүдийг "REDUCER"-үүдээс гаргаж ирдэг байна. "store" дотор өөрчлөгдөхөд dispatch хийгээд "View" дээр холбогдох компонентүүд өөрөө өөрсдийгө дахин рендер хийж харуулна.
Тухайн нэг компонент нилээн олон үйлдэл хийгээд дотроо стэйт хадгалдаг бол тэр үйлдэл болгонд нь зориулсан "Action" бичнэ. "Action" файлыг бичсэний дараагаар тэр "Action"-д хариу үйлдэл үзүүлэх Middleware бичих эсвэл REDUCER нэмнэ.

Global store нь бүх component-ийн гадуур байрладаг. "store" нь дотроо getState, subscribe, dispatch гэсэн 3 функцтай байдаг. 
    "getState"- доторх өгөгдөл ямар байгааг илтгэнэ.
        "subscribe" - ямар өгөгдөлийг гарахад өөрчлөлтийг мэдэхийг хүсч байгааг, component-үүд "store"-доо     subscribe-ийг ашиглаж бүртгүүлж болдог:
    "dispatch" - энэ "store" нь action-ийг үүсгэж цацдаг.
    Reducer болгон өөрийн хариуцсан хэсгийг ажиллуулна.     Хамгийн анх global state үүсхэд хоосон байна, тэр тохиолдолд reducer-үүд ийм өгөгдөлөөр эхлэнэ шүү гэсэн default өгөгдөлийг дотроо хадгалж байдаг. 
dispatch хийсний дараа reducer ажиллах уу үгүй юу гэдгээ  шалгана. Хэрвээ тухайн нөхцөлд ажиллах шаардлаггүй байх юм бол state-ээ ямар байснаар нь store-руу буцаадаг.

Redux-ийн нэг онцлог нь байгаа стэйтийг update хийхгүй дандаа шинээр бичдэг.

"Action" гэдэг нь аction дотор юуг яаж хийхийг оги зааж өгдөггүй, харин ийм Action боллоо шүү, ийм явдал боллоо шүү гэдгийг зааж өгдөг.

Redux-ийн "provider" гэдэг компонентийг бүх зүйлсийхээ гадуур байрлуулна, provider дотор бүх стэйт яваад орчино гэж ойлгож болно. ингэснээр provider-оос бүх компонент рүү стэйт дамжуулах боломжтой. Гэхдээ "Provider" дотроос стэйтээ авахын тулд "Connect"гэдэг highOrder component-ийг ашиглана. "Provider" дотроос ямар нэгэн компонент рүү дунд нь байгаа өөр олон компонентийг алгасаж стэйт дамжуулах вэ гэхээр React цаанаа REACT CONTEXT API гэдэг зүйлийг ашигладаг. REACT CONTEXT API нь глобаль өгөгдөлтэй төстэй боловч React өөрөө удирддаг. Provider болон connect нь REACT CONTEXT API ашиглан хоорондоо өгөгдөл дамжуулдаг бөгөөд нэг context дээр нь юм бичих үед нөгөө context нь хүлээж авдаг. context api хэрэглэж байгаа нь бидэнд харагдахгүй.
Тухайн компонент "Action" цацахын тулд "connect"-той холбогдоно. 

Жнь: Burger component дотор ingredients гэдэг зүйл хэрэг боллоо гэхэд  store дотроос Provider-аар дамжуулан "connect" highOrder component-д өгнө. Мөн ямар нэгэн Action шаардлагатай тохиолдолд мөн connect" highOrder component-д өгнө. Тэгсэнийхээ дараагаар Burger component-оо props-оор нь дамжуулан өгдөг. Өгөгдөл рүүгээ хандахдаа props ingredients эсвэл props-ийн action гэх мэтээр дандаа  props-оор нь хандана, ямар ч this.state гэсэн юм байхгүй.

connect(a, b)(BurgerPage)
connect-ийн "а" нь стэйтийн өөрчлөлтийг хүлээж авдаг, "Б" нь хэрэглэх "action"-уудыг захиалдаг.
гэхдээ дээрх 2-ыг бодит төсөл дээр а,б гэж бичдэггүй, харин mapStateToProps, mapDispatchtoProps гэж нэрлэдэг.

Зарим компонентүүд "Action" хэрэглэдэггүй учраас 2 дахь функцыг хэрэглэхгүй байсан ч болно. Дараах жишээ шиг хэрэглэнэ:
      const mapStateToProps = (state) => {
        return {
          burgeriinOrts: state.ingredients,
        };
      };

      export default connect(mapStateToProps)(BurgerPage);
