{"ast":null,"code":"var _jsxFileName = \"/Users/dugertulga/Downloads/20200221_45burger_dynamc_content/src/pages/BurgerPage/index.js\";\nimport React, { Component } from \"react\";\nimport Burger from \"../../components/Burger\";\nimport BuildControls from \"../../components/BuildControls\";\nimport Modal from \"../../components/General/Modal\";\nimport OrderSummary from \"../../components/OrderSummary\";\nconst INGREDIENT_PRICES = {\n  salad: 150,\n  cheese: 250,\n  bacon: 800,\n  meat: 1500\n};\nconst INGREDIENT_NAMES = {\n  bacon: \"Гахайн мах\",\n  cheese: \"Бяслаг\",\n  meat: \"Үхрийн мах\",\n  salad: \"Салад\"\n};\n\nclass BurgerPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        cheese: 0,\n        bacon: 0,\n        meat: 0\n      },\n      totalPrice: 1000,\n      purchasing: false,\n      confirmOrder: false\n    };\n\n    this.showConfirmModal = () => {};\n\n    this.ortsNemeh = type => {\n      const newIngredients = { ...this.state.ingredients\n      };\n      newIngredients[type]++;\n      const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n      this.setState({\n        purchasing: true,\n        totalPrice: newPrice,\n        ingredients: newIngredients\n      });\n    };\n\n    this.ortsHasah = type => {\n      if (this.state.ingredients[type] > 0) {\n        const newIngredients = { ...this.state.ingredients\n        };\n        newIngredients[type]--;\n        const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n        this.setState({\n          purchasing: newPrice > 1000,\n          totalPrice: newPrice,\n          ingredients: newIngredients\n        });\n      }\n    };\n  }\n\n  render() {\n    const disabledIngredients = { ...this.state.ingredients\n    };\n\n    for (let key in disabledIngredients) {\n      disabledIngredients[key] = disabledIngredients[key] <= 0;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(OrderSummary, {\n      ingredientsNames: INGREDIENT_NAMES,\n      ingredients: this.state.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(Burger, {\n      orts: this.state.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(BuildControls, {\n      ingredientsNames: INGREDIENT_NAMES,\n      disabled: !this.state.purchasing,\n      price: this.state.totalPrice,\n      disabledIngredients: disabledIngredients,\n      ortsHasah: this.ortsHasah,\n      ortsNemeh: this.ortsNemeh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BurgerPage;\n/* <BuildControls ortsNemeh={this.ortsNemeh}/> гэдэг нь props-оор ortsNemeh-ийг дамжуулж байна гэсэн үг */\n\n/*\r\nortsNemeh = (type) => {\r\n\r\n  const newIngredients = {...this.state.ingredients};\r\n  /* Spread operator ашиглаад хуулбар үүсгэсний дараагаар тухайн хуулбар дээрх элементийн type-ийн дагуу элементийг нэг нэгээр нэмэгдүүлэхдээ \r\n  newIngredients[type]++;\r\n// newIngredients[type]++ = newIngredients[salad]++адилхан гэсэн үг.\r\n */\n\n/* Хэрвээ modal дотор зөндөө олон юм байгаа тохиолдолд яаж гарах юээ гэхээр         <Modal>\r\n          <h1>Та итгэлтэй байна уу...</h1>\r\n          <p>Захиалгын дэлгэрэнгүй</p>\r\n        </Modal>  ингэж бичиж болно. \r\n        \r\n        энэ бүгдийг Modal component яаж хүлээж авах вэ гэхээр Modal component-ийн хаалтан дотор байгаа бүх зүйлс Modal component-ийн props -оор дамждаг. {props.children} гэдэг тусгай property-гээр дамждаг.*/","map":{"version":3,"sources":["/Users/dugertulga/Downloads/20200221_45burger_dynamc_content/src/pages/BurgerPage/index.js"],"names":["React","Component","Burger","BuildControls","Modal","OrderSummary","INGREDIENT_PRICES","salad","cheese","bacon","meat","INGREDIENT_NAMES","BurgerPage","state","ingredients","totalPrice","purchasing","confirmOrder","showConfirmModal","ortsNemeh","type","newIngredients","newPrice","setState","ortsHasah","render","disabledIngredients","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Burger from \"../../components/Burger\";\r\nimport BuildControls from \"../../components/BuildControls\";\r\nimport Modal from \"../../components/General/Modal\";\r\nimport OrderSummary from \"../../components/OrderSummary\";\r\n\r\nconst INGREDIENT_PRICES = { salad: 150, cheese: 250, bacon: 800, meat: 1500 };\r\nconst INGREDIENT_NAMES = {\r\n  bacon: \"Гахайн мах\",\r\n  cheese: \"Бяслаг\",\r\n  meat: \"Үхрийн мах\",\r\n  salad: \"Салад\",\r\n};\r\nclass BurgerPage extends Component {\r\n  state = {\r\n    ingredients: {\r\n      salad: 0,\r\n      cheese: 0,\r\n      bacon: 0,\r\n      meat: 0,\r\n    },\r\n    totalPrice: 1000,\r\n    purchasing: false,\r\n    confirmOrder: false,\r\n  };\r\n\r\n  showConfirmModal = () => {};\r\n\r\n  // class base object-ийн дотоод \"state\"-ийг өөрчлөхдөө заавалчгүй шинэ object байгуулах шаардлагатай, эс бөгөөс рендер хийгдэх үед ямар нэгэн хуучин state-тэйгээ адилхан гэж үзээд рендер хийдэггүй. Тиймээс эхлээд object-ийн хуулбарыг үүёгэх шаардлагатай, хамгийн амархан арга нь байгуулагч функц ашиглах юм.\r\n  ortsNemeh = (type) => {\r\n    const newIngredients = { ...this.state.ingredients };\r\n    newIngredients[type]++;\r\n    const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\r\n    this.setState({\r\n      purchasing: true,\r\n      totalPrice: newPrice,\r\n      ingredients: newIngredients,\r\n    });\r\n  };\r\n\r\n  //орцоо хасахын тулд ingredients нь 0 байж болохгүй учир эхлээд нөхцөл шалгана.\r\n  ortsHasah = (type) => {\r\n    if (this.state.ingredients[type] > 0) {\r\n      const newIngredients = { ...this.state.ingredients };\r\n      newIngredients[type]--;\r\n      const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\r\n      this.setState({\r\n        purchasing: newPrice > 1000,\r\n        totalPrice: newPrice,\r\n        ingredients: newIngredients,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const disabledIngredients = { ...this.state.ingredients };\r\n    for (let key in disabledIngredients) {\r\n      disabledIngredients[key] = disabledIngredients[key] <= 0;\r\n    }\r\n    return (\r\n      <div>\r\n        <Modal>\r\n          <OrderSummary\r\n            ingredientsNames={INGREDIENT_NAMES}\r\n            ingredients={this.state.ingredients}\r\n          />\r\n        </Modal>\r\n        <Burger orts={this.state.ingredients} />\r\n        <BuildControls\r\n          ingredientsNames={INGREDIENT_NAMES}\r\n          disabled={!this.state.purchasing}\r\n          price={this.state.totalPrice}\r\n          disabledIngredients={disabledIngredients}\r\n          ortsHasah={this.ortsHasah}\r\n          ortsNemeh={this.ortsNemeh}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BurgerPage;\r\n\r\n/* <BuildControls ortsNemeh={this.ortsNemeh}/> гэдэг нь props-оор ortsNemeh-ийг дамжуулж байна гэсэн үг */\r\n/*\r\nortsNemeh = (type) => {\r\n\r\n  const newIngredients = {...this.state.ingredients};\r\n  /* Spread operator ашиглаад хуулбар үүсгэсний дараагаар тухайн хуулбар дээрх элементийн type-ийн дагуу элементийг нэг нэгээр нэмэгдүүлэхдээ \r\n  newIngredients[type]++;\r\n// newIngredients[type]++ = newIngredients[salad]++адилхан гэсэн үг.\r\n */\r\n\r\n/* Хэрвээ modal дотор зөндөө олон юм байгаа тохиолдолд яаж гарах юээ гэхээр         <Modal>\r\n          <h1>Та итгэлтэй байна уу...</h1>\r\n          <p>Захиалгын дэлгэрэнгүй</p>\r\n        </Modal>  ингэж бичиж болно. \r\n        \r\n        энэ бүгдийг Modal component яаж хүлээж авах вэ гэхээр Modal component-ийн хаалтан дотор байгаа бүх зүйлс Modal component-ийн props -оор дамждаг. {props.children} гэдэг тусгай property-гээр дамждаг.*/\r\n"]},"metadata":{},"sourceType":"module"}